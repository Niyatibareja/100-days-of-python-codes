# 100-days-of-python-codes
#Day 1
# Python Output


#python is case sensitive
print('Hello World')

print(hi) #it will throw error as it takes string only. 

print(1)

print(True)

print('Hello',1 ,2, 3, True)

print('Hello', 1,2,3,True,sep='/')

print('you', end="&")
print ('I')

# Data Types

1. Integers

print(100)

2. Float(Decimal)

print(2.023)

3. Boolean

print(True)
print(False)

4. String(Text)

print('Hello LinkedIn Community')

5. Complex

print(1+2j)

6. List


In Python, a list is a data type used to store a collection of values. It is one of the built-in data types and is classified as a sequence type. Lists are ordered, mutable (which means you can change their contents), and can contain elements of different data types, including integers, floats, strings, or even other lists.

You can create a list in Python by enclosing a comma-separated sequence of values within square brackets [ ]. For example:

print([1,2,3,4])

7. Tuple

In Python, a tuple is another data type used to store a collection of values, similar to a list. However, there are some key differences between tuples and lists:

Immutable: The most significant difference is that tuples are immutable, meaning once you create a tuple, you cannot change its contents (add, remove, or modify elements). Lists, on the other hand, are mutable, and you can modify them after creation.

Syntax: Tuples are created by enclosing a comma-separated sequence of values within parentheses (). Lists are created with square brackets []. For example:

Performance: Due to their immutability, tuples can be more efficient in terms of memory and performance for certain use cases compared to lists.

Tuples are often used when you have a collection of values that should not be changed during the course of your program. For example, you might use tuples to represent coordinates (x, y), dates (year, month, day), or other data where the individual components should remain constant.

print((1,2,3,4))

8. Sets

In Python, a set is a built-in data type used to store an unordered collection of unique elements. Sets are defined by enclosing a comma-separated sequence of values within curly braces {} or by using the built-in set() constructor. Sets automatically eliminate duplicate values, ensuring that each element is unique within the set.

print({1,2,3,4,7})

9. Dictionary

In Python, a dictionary is a built-in data type used to store a collection of key-value pairs. Each key in a dictionary maps to a specific value, creating a relationship between them. Dictionaries are also known as associative arrays or hash maps in other programming languages.

print({'name':'Niyati','gender':'Female','weight':60})

# How to know which type of Datatype is?

type([1,2,3,7])

type({'age':21})

# Variables

In Python, variables are used to store data values. These values can be numbers, strings, lists, dictionaries, or any other data type. Variables are essential for manipulating and working with data in your programs. Here's how you declare and use variables in Python:

Variable Declaration: You declare a variable by assigning a value to it using the assignment operator '='.

x= 5
name = "Alice"

Variable Names: Variable names (also known as identifiers) must adhere to the following rules:
They can contain letters (a-z, A-Z), digits (0-9), and underscores (_).
They cannot start with a digit.
Variable names are case-sensitive, so myVar and myvar are treated as different variables.
Python has reserved keywords (e.g., if, for, while, print) that cannot be used as variable names.
Data Types: Python is dynamically typed, which means you don't need to declare the data type of a variable explicitly. Python will determine the data type automatically based on the assigned value.

x  = 5
name = 'Alice'

Reassignment: You can change the value of a variable by assigning it a new value.

x = 7
x = x + 1 

print(x)

a, b, c = 1,2,3

print(a)

a=1
b=2
c=3
print(a,b,c)

a=b=c=5
print(a,b,c)

# User Input

input('Enter Email')

# take input from users and store them in a variable
fnum = int(input('enter first number'))
snum = int(input('enter second number'))
#print(type(fnum),type(snum))
# add the 2 variables
result = fnum + snum
# print the result
print(result)
print(type(fnum))

# Type Conversion

str_number = "123"
int_number = int(str_number)  # Converts the string "123" to an integer
int_number

int_value = 42
float_value = float(int_value)  # Converts the integer 42 to a float
float_value

a = 23
b = "24"

print(a+b) # This is not correct.

a = 23
b = "24"

print(float(a)+float(b)) #this is correct

# Literals

a = 0b1010 #Binary Literals
b = 100 #Decimal Literal 
c = 0o310 #Octal Literal
d = 0x12c #Hexadecimal Literal

#Float Literal
float_1 = 10.5 
float_2 = 1.5e2 # 1.5 * 10^2
float_3 = 1.5e-3 # 1.5 * 10^-3

#Complex Literal 
x = 3.14j

print(a, b, c, d)
print(float_1, float_2,float_3)
print(x, x.imag, x.real)

x = 3.14j
print(x.imag)


string = 'This is Python'
strings = "This is Python"
char = "C"
multiline_str = """This is a multiline string with more than one line code."""
unicode = u"\U0001f600\U0001F606\U0001F923"
raw_str = r"raw \n string"

print(string)
print(strings)
print(char)
print(multiline_str)
print(unicode)
print(raw_str)



