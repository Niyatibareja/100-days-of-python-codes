# 100-days-of-python-codes
#Happy Learning ! 
#Day 5 
# Strings In Python 
In Python, a string is a sequence of characters enclosed within either single (' '), double (" "), or triple (''' ' ''', """ """ or ''' '''') quotes. Strings are used to represent text data and are one of the fundamental data types in Python

## Creating Strings


s = 'Hello World!' #string with single quotes
print(s)

s = "Hello World!" #String with double quotes
print(s)

In Python, you can create strings using both single quotes (') and double quotes ("), and they are functionally equivalent. The choice between using single or double quotes mainly depends on your personal preference or specific coding style guidelines.


If your string contains a quotation mark character (either a single quote or double quote), you can use the other type of quote to define the string without escaping the inner quotes. This can make your code more readable:

single_quoted_string = 'He said, "Hello!"'
double_quoted_string = "He said, 'Hello!'"
# here we use single and double quotes
print(single_quoted_string)
print(double_quoted_string)

s = '''hello'''  # multiline strings
s = """hello"""
s = str('hello')
print(s)

### Indexing
Indexing in Python refers to the process of accessing individual elements or characters within a sequence, such as a string. Strings in Python are sequences of characters, and you can access specific characters in a string using indexing. Indexing is done using square brackets [ ], and Python uses a zero-based indexing system, meaning the first element has an index of 0, the second element has an index of 1, and so on.

we have two types of Indexing:

1. Positive indexing
2. Negative Indexing

s = "Hello World"

print(s[2]) #Accesses the third character, 'l'
print(s[4]) #Accesses the fifth character, 'o'

# Using negative indexing 
print(s[-3]) #Access the third last character
print(s[-2]) #Access the second last character

# Slicing
In Python, slicing is a technique used to extract a portion of a string, list, or any other sequence-like data structure. When it comes to strings, slicing allows you to create a new string by specifying a range of indices to extract a substring from the original string.


1. string: The original string you want to slice.
2. start: The index from which the slicing begins (inclusive).
3. end: The index at which the slicing ends (exclusive).

s = 'hello world'
print(s[1:4]) # from 1 index that is e to 3 index=o
print(s[:5]) # from 0 to 4
print(s[0:]) # from 1 to all
print(s[:]) # all string
print(s[-5:]) # with negative slicing

s = 'hello world'
print(s[6:0:-3])
print(s[::-1])
print(s[-1:-6:-1])

Immutable: Strings in Python are immutable, meaning once you create a string, you cannot change its content. You can create new strings based on the original string, but the original string remains unchanged.


